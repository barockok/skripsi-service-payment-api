//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Merchant, Transaction, MerchantNotFound;
var ttypes = module.exports = {};
Merchant = module.exports.Merchant = function(args) {
  this.id = null;
  this.website = null;
  this.notification_url = null;
  this.active = null;
  this.name = null;
  this.url = null;
  this.bank_mid = null;
  this.notification_email = null;
  this.industry = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.website !== undefined && args.website !== null) {
      this.website = args.website;
    }
    if (args.notification_url !== undefined && args.notification_url !== null) {
      this.notification_url = args.notification_url;
    }
    if (args.active !== undefined && args.active !== null) {
      this.active = args.active;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.bank_mid !== undefined && args.bank_mid !== null) {
      this.bank_mid = args.bank_mid;
    }
    if (args.notification_email !== undefined && args.notification_email !== null) {
      this.notification_email = args.notification_email;
    }
    if (args.industry !== undefined && args.industry !== null) {
      this.industry = args.industry;
    }
  }
};
Merchant.prototype = {};
Merchant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.website = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.notification_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.bank_mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.notification_email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.industry = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Merchant.prototype.write = function(output) {
  output.writeStructBegin('Merchant');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.website !== null && this.website !== undefined) {
    output.writeFieldBegin('website', Thrift.Type.STRING, 2);
    output.writeString(this.website);
    output.writeFieldEnd();
  }
  if (this.notification_url !== null && this.notification_url !== undefined) {
    output.writeFieldBegin('notification_url', Thrift.Type.STRING, 3);
    output.writeString(this.notification_url);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 4);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 6);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.bank_mid !== null && this.bank_mid !== undefined) {
    output.writeFieldBegin('bank_mid', Thrift.Type.STRING, 7);
    output.writeString(this.bank_mid);
    output.writeFieldEnd();
  }
  if (this.notification_email !== null && this.notification_email !== undefined) {
    output.writeFieldBegin('notification_email', Thrift.Type.STRING, 8);
    output.writeString(this.notification_email);
    output.writeFieldEnd();
  }
  if (this.industry !== null && this.industry !== undefined) {
    output.writeFieldBegin('industry', Thrift.Type.STRING, 9);
    output.writeString(this.industry);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Transaction = module.exports.Transaction = function(args) {
  this.id = null;
  this.transaction_time = null;
  this.merchant_id = null;
  this.bank_mid = null;
  this.gross_amount = null;
  this.customer_name = null;
  this.customer_email = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.transaction_time !== undefined && args.transaction_time !== null) {
      this.transaction_time = args.transaction_time;
    }
    if (args.merchant_id !== undefined && args.merchant_id !== null) {
      this.merchant_id = args.merchant_id;
    }
    if (args.bank_mid !== undefined && args.bank_mid !== null) {
      this.bank_mid = args.bank_mid;
    }
    if (args.gross_amount !== undefined && args.gross_amount !== null) {
      this.gross_amount = args.gross_amount;
    }
    if (args.customer_name !== undefined && args.customer_name !== null) {
      this.customer_name = args.customer_name;
    }
    if (args.customer_email !== undefined && args.customer_email !== null) {
      this.customer_email = args.customer_email;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.transaction_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchant_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bank_mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.gross_amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.customer_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.customer_email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.transaction_time !== null && this.transaction_time !== undefined) {
    output.writeFieldBegin('transaction_time', Thrift.Type.STRING, 2);
    output.writeString(this.transaction_time);
    output.writeFieldEnd();
  }
  if (this.merchant_id !== null && this.merchant_id !== undefined) {
    output.writeFieldBegin('merchant_id', Thrift.Type.STRING, 3);
    output.writeString(this.merchant_id);
    output.writeFieldEnd();
  }
  if (this.bank_mid !== null && this.bank_mid !== undefined) {
    output.writeFieldBegin('bank_mid', Thrift.Type.STRING, 4);
    output.writeString(this.bank_mid);
    output.writeFieldEnd();
  }
  if (this.gross_amount !== null && this.gross_amount !== undefined) {
    output.writeFieldBegin('gross_amount', Thrift.Type.I32, 5);
    output.writeI32(this.gross_amount);
    output.writeFieldEnd();
  }
  if (this.customer_name !== null && this.customer_name !== undefined) {
    output.writeFieldBegin('customer_name', Thrift.Type.STRING, 6);
    output.writeString(this.customer_name);
    output.writeFieldEnd();
  }
  if (this.customer_email !== null && this.customer_email !== undefined) {
    output.writeFieldBegin('customer_email', Thrift.Type.STRING, 7);
    output.writeString(this.customer_email);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 8);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MerchantNotFound = module.exports.MerchantNotFound = function(args) {
  Thrift.TException.call(this, "MerchantNotFound")
  this.name = "MerchantNotFound"
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(MerchantNotFound, Thrift.TException);
MerchantNotFound.prototype.name = 'MerchantNotFound';
MerchantNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MerchantNotFound.prototype.write = function(output) {
  output.writeStructBegin('MerchantNotFound');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

